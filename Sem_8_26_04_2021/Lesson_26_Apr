Go to your work directory
input ROOT file: ls -la nfs/lfi.mipt.su/data/nikola/atlas/Bs_el_lambda/2018_Delayed/B
for MakeClass:
root -l /nfs/lfi.mipt.su/data/nikola/atlas/Bs_el_lambda/2018_Delayed/B/user.nikola.20734971.EXT0._000061.Output.root
TTree * read_tree = (TTree*)gROOT->FindObject("LambdaB");
read_tree ->MakeClass("K0Lam_study");
//  Files: K0Lam_study.h and K0Lam_study.C generated from TTree: LambdaB

Read input Tree and reconstruct K0 candidates:
vim K0Lam_study.h
caution: there are Vectors, NOT simple variables
needed : vector<float>   *pos_pt;
         vector<float>   *pos_eta;
         vector<float>   *pos_phi;
         vector<float>   *neg_pt;
         vector<float>   *neg_eta;
for K-->pi+ pi- decay needed also mass pi+- : float mpi = 139.57

Include into void K0Lam_study.C : 
#include "TLorentzVector.h"
   in void K0Lam_study::Loop() { ...}
   if (fChain == 0) return;
   fChain->SetBranchStatus("pos_pt",1);
   fChain->SetBranchStatus("pos_eta",1);
   fChain->SetBranchStatus("pos_phi",1);
   fChain->SetBranchStatus("neg_pt",1);
   fChain->SetBranchStatus("neg_eta",1);
   fChain->SetBranchStatus("neg_phi",1);
   float mpi = 139.57;
   float mpp = 938.27;
   float mpn = 938.27;
        float  dpos_pt = 0;
        float  dpos_eta= 0;
        float  dpos_phi= 0;
        float  dneg_pt = 0;
        float  dneg_eta= 0;
        float  dneg_phi= 0;
      TLorentzVector lor_pos;
      TLorentzVector lor_neg;
      TLorentzVector lor_sum;
      TH1D * h_massK0;
      h_massK0 = new  TH1D("h_massK0", "h_massK0", 80, 200., 1000.);
   Long64_t nentries = fChain->GetEntriesFast();
   cout << " nentries = " << nentries << endl;

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
       if( jentry%1000 == 1) {
        cout << " process event " << jentry << endl;
       }
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      if( jentry%1000 == 1) {
                           cout << " jentry = " << jentry <<endl;
                           cout << " pos_pt->size() " << pos_pt->size() << endl;
                           cout << " pos_pt->at(0) " << pos_pt->at(0) << endl;
                           }
      if( pos_pt->size() !=0) {
               dpos_pt = pos_pt->at(1);
               dpos_eta= pos_eta->at(1);
               dpos_phi= pos_phi->at(1);
               dneg_pt = neg_pt->at(1);
               dneg_eta= neg_eta->at(1);
               dneg_phi= neg_phi->at(1);
        if( jentry%1000 == 1) {
        cout << " pos_pt = " << dpos_pt << endl; }
        lor_pos.SetPtEtaPhiM( dpos_pt, dpos_eta, dpos_phi, mpi);
        lor_neg.SetPtEtaPhiM( dneg_pt, dneg_eta, dneg_phi, mpi);
        lor_sum = lor_pos + lor_neg;
        massK0 = lor_sum.M();
        h_massK0->Fill( massK0 );
      }
   }
   h_massK0->Draw();
 TFile *_filewOut= TFile::Open("outfile.root", "recreate");
 h_massK0->Write();
 _filewOut->Close();
}

example of run:
 root -l
TFile *_file0 = TFile::Open("/nfs/lfi.mipt.su/data/nikola/atlas/Bs_el_lambda/2018_Delayed/B/user.nikola.20734971.EXT0._000061.Output.root");
chain = new TChain("LambdaB");
.L K0Lam_study.C
K0Lam_study t
t.Loop();

Caution: there is a problem with several events after event 16330 (excluded) 
working code: 
see  K0Lam_study.h
     K0Lam_study.C







